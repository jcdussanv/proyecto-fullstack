package com.sistemapagosut.sistemas_pago_backend_ut.web;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.sistemapagosut.sistemas_pago_backend_ut.entities.Estudiante;
import com.sistemapagosut.sistemas_pago_backend_ut.entities.Pago;
import com.sistemapagosut.sistemas_pago_backend_ut.enums.PagoStatus;
import com.sistemapagosut.sistemas_pago_backend_ut.enums.TypePago;
import com.sistemapagosut.sistemas_pago_backend_ut.repository.EstudianteRepository;
import com.sistemapagosut.sistemas_pago_backend_ut.repository.PagoRepository;
import com.sistemapagosut.sistemas_pago_backend_ut.services.PagoService;

//define la clase como un controlador REST
@RestController
@CrossOrigin("*") // permite que esta Api sea accesible desde cualquier dominio
public class pagoController {

    @Autowired
    private EstudianteRepository estudianteRepository;

    @Autowired
    private PagoRepository pagoRepository;

    @Autowired
    private PagoService pagoService;

    // METODOS PAREA EL MANEJO DE ESTUDIANTES

    // metodo que me devuelva la lista con todos los estudiantes
    @GetMapping("/estudiantes")
    public List<Estudiante> listarEstudiante() {
        return estudianteRepository.findAll();// retona todos los estudiantes desde la base de datos

    }

    // metodo que ddevuelva un estudiante por su coodigo
    @GetMapping("/estudiantes/{codigo}")
    public Estudiante listarEstudiantePorCodigo(@PathVariable String codigo) {
        return estudianteRepository.findByCodigo(codigo);// busca estudiante por su codigo

    }

    // metodo que lista estudiante segun el programa academico
    @GetMapping("/estudiantesPorPrograma")
    public List<Estudiante> listarEstudiantesPorPrograma(@RequestParam String programaId) {
        return estudianteRepository.findByprogramaId(programaId);

    }

    //METODOS PPARA EL MANEJO DE PAGOS  

        //METODO QUE DEVUELVA LA LISTA CON TODOS LOS PAGOS REGISTRADOS
    @GetMapping("/Pagos")
    public List<Pago> listarPagos()  {
        return pagoRepository.findAll();
    }

    //metodoo que devuelva un pago es especifico segun su id
    @GetMapping("/pagos/{id}")
    public Pago listarPagoPorId(@PathVariable Long id)   {
        return pagoRepository.findById(id).get();//busca un pago por su ID

    }

    //metodo que lista los pagos hechos por estudiante en especifico segun su codigo
    @GetMapping("/estudiantes/{codigo}/pagos")
    public List<Pago> listarPagoPorCodigoEstudiante(@PathVariable String codigo)   {
        return pagoRepository.findByEstudianteCodigo(codigo);

    }

    //metodo que liste los pagos segun su estad(CREAOD, VALIDADO, RECHAZADO)
    @GetMapping("pagosPorStatus")
    public List<Pago> listarPagoPorStatus(@RequestParam PagoStatus status)   {
        return pagoRepository.findByStatus(status);
    }

    //metodo que lista su pago segun su tipo (EFECTIVO, CHEQUE, O TRANSFERENCIA
    //DEPOSITO)
    @GetMapping("pagos/Portipo")
    public List<Pago> listarPagoPorType(@RequestParam TypePago type)   {
        return pagoRepository.findByType(type);

    }

    //metodo para actualizar un metodo de pago
    @PutMapping("pagos/{pagoId}/actualizar pago")
    public Pago actualizarStatusPago( @RequestParam PagoStatus status, @PathVariable Long pagoId)  {
        return pagoService.actualizarPagoPorStatus(status, pagoId);//llama al servivcioo actualizar

    }

    //metodo para registrar un pago con archivo adjunto
    @PatchMapping(path = "/pagos", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public Pago guardarPago(
        @RequestParam("file") MultipartFile file,// archivo adjunto
        double cantidad,
        TypePago type,
        LocalDate date,
            String codigEstudiante) throws IOException  {
        return pagoService.savePago(file, cantidad, type, date, codigEstudiante);//guarda el pago en la bd       } 

    }

    //metodo que devuelve un archivo asociado a un pago en formato pdf
    @GetMapping(value = "/pagoFile/ {pagoId}", produces = MediaType.APPLICATION_PDF_VALUE) 

        public byte[] listarArchivoPorId(@PathVariable Long pagoId) throws IOException  {
            return pagoService.getArchivoPorId(pagoId);
        }
    


}
